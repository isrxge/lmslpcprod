datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Role {
  id             String           @id @default(uuid())
  title          String           @unique
  status         String           @default("active")
  rolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(uuid())
  title          String           @unique
  status         String           @default("active")
  userPermission userPermission[]
  RolePermission RolePermission[]
}

model RolePermission {
  id           String      @id @default(uuid())
  role         Role?       @relation(fields: [roleId], references: [id])
  roleId       String?
  permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId String?

  @@index([roleId])
  @@index([permissionId])
}

model userPermission {
  id           String     @id @default(uuid())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([permissionId])
  @@index([userId])
}

model Department {
  id                  String                @id @default(uuid())
  title               String                @unique
  User                User[]
  status              String                @default("active")
  ProgramOnDepartment ProgramOnDepartment[]

  CourseOnDepartment CourseOnDepartment[]
}

model CourseOnDepartment {
  id           String      @id @default(uuid())
  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  course       Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String?

  @@index([departmentId])
  @@index([courseId])
}

model ProgramOnDepartment {
  id           String      @id @default(uuid())
  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  program      Program     @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId    String

  @@index([departmentId])
  @@index([programId])
}

model User {
  id                       String                     @id @default(uuid())
  email                    String                     @unique
  Department               Department?                @relation(fields: [departmentId], references: [id])
  departmentId             String?
  username                 String
  // role                     String
  star                     Int?
  imageUrl                 String?
  status                   String                     @default("active")
  programParticipantRecord ProgramParticipantRecord[]
  Course                   Course[]                   @relation("userId")
  updatedCourse            Course[]                   @relation("updatedBy")
  instructedCourse         Course[]                   @relation("courseInstructedBy")
  ClassSessionRecord       ClassSessionRecord[]
  Module                   Module[]
  UserProgress             UserProgress[]
  HistoryRecord            HistoryRecord[]
  BookMark                 BookMark[]
  Program                  Program[]                  @relation("userId")
  updatedProgram           Program[]                  @relation("updatedBy")
  userPermission           userPermission[]

  @@index([departmentId])
}

model Program {
  id    String @id @default(uuid())
  title String @db.Text

  description              String?                    @db.Text
  imageUrl                 String?                    @db.Text
  user                     User                       @relation("userId", fields: [userId], references: [id])
  userId                   String
  updatedUser              User?                      @relation("updatedBy", fields: [updatedBy], references: [id])
  updatedBy                String                     @default("")
  startDate                DateTime                   @default(now())
  endDate                  DateTime?
  isPublished              Boolean                    @default(false)
  programParticipantRecord ProgramParticipantRecord[]

  courseWithProgram   courseWithProgram[]
  ProgramOnDepartment ProgramOnDepartment[]

  @@index([userId])
  @@index([updatedBy])
}

model ProgramParticipantRecord {
  id        String   @id @default(uuid())
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  progress  String   @db.Text
  status    String
  startDate DateTime @default(now())
  endDate   DateTime

  @@index([programId])
  @@index([userId])
}

model Course {
  id                 String               @id @default(uuid())
  title              String               @db.Text
  description        String?              @db.Text
  imageUrl           String?              @db.Text
  user               User                 @relation("userId", fields: [userId], references: [id])
  userId             String
  updatedUser        User?                @relation("updatedBy", fields: [updatedBy], references: [id])
  updatedBy          String               @default("")
  courseInstructor   User?                @relation("courseInstructedBy", fields: [courseInstructedBy], references: [id])
  courseInstructedBy String               @default("")
  startDate          DateTime             @default(now())
  endDate            DateTime?
  updateDate         DateTime?
  intro              String?
  isPublished        Boolean              @default(false)
  credit             Int?
  ClassSessionRecord ClassSessionRecord[]
  Module             Module[]
  courseWithProgram  courseWithProgram[]
  BookMark           BookMark[]
  CourseOnDepartment CourseOnDepartment[]

  @@index([userId])
  @@index([updatedBy])
  @@index([courseInstructedBy])
}

model ClassSessionRecord {
  id        String    @id @default(uuid())
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  progress  String?   @db.Text
  status    String?
  startDate DateTime?
  endDate   DateTime?
  score     Int?

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model BookMark {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model Module {
  id           String         @id @default(uuid())
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  title        String         @db.Text
  type         String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  position     Int
  isPublished  Boolean
  UserProgress UserProgress[]
  Slide        Slide[]
  maxAsset     Int?
  waitTime     Int?
  timeLimit    Float?
  scoreLimit   Int?

  Category Category[]
  Resource Resource[]

  @@index([courseId])
  @@index([userId])
}

model Slide {
  id          String  @id @default(uuid())
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  title       String?
  description String?
  content     String?
  position    Int
  contentType String?
  videoUrl    String?
  fileUrl     String?

  @@index([moduleId])
}

model Resource {
  id             String @id @default(uuid())
  module         Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId       String
  attachment     String
  attachmentType String

  @@index([moduleId])
}

model Category {
  id              String @id @default(uuid())
  title           String
  module          Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId        String
  numOfAppearance Int

  Exam Exam[]

  @@index([moduleId])
}

model Exam {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  question   String?  @db.Text
  score      Int
  compulsory Boolean
  answer     Answer[]
  type       String?

  @@index([categoryId])
}

model Answer {
  id        String  @id @default(uuid())
  exam      Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    String
  text      String
  isCorrect Boolean

  @@index([examId])
}

model UserProgress {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  module    Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String
  progress  String    @db.Text
  status    String
  startDate DateTime
  endDate   DateTime?
  score     Int?
  attempt   Int?

  @@unique([moduleId, userId])
  @@index([moduleId])
  @@index([userId])
}

model HistoryRecord {
  id     String   @id @default(uuid())
  title  String   @db.Text
  note   String   @db.Text
  date   DateTime
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model courseWithProgram {
  id        String   @id @default(uuid())
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String?
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  @@unique([programId, courseId])
  @@index([programId])
  @@index([courseId])
}
